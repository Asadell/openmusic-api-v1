{
  "info": {
    "_postman_id": "d6e364f5-588f-40b8-8f86-e86156d672b1",
    "name": "Open Music API V2 Test",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12297972"
  },
  "item": [
    {
      "name": "[Optional] Activities Playlist",
      "item": [
        {
          "name": "[No test] Prerequisite",
          "item": [
            {
              "name": "Add Song A",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { data: { songId } } = pm.response.json();\r",
                      "pm.environment.set('songIdA', songId);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"title\": \"Life in Technicolor\",\r\n    \"year\": 2008,\r\n    \"performer\": \"Coldplay\",\r\n    \"genre\": \"Pop\",\r\n    \"duration\": 120\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:{{port}}/songs",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "{{port}}",
                  "path": ["songs"]
                }
              },
              "response": []
            },
            {
              "name": "Add Song B",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { data: { songId } } = pm.response.json();\r",
                      "pm.environment.set('songIdB', songId);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"title\": \"Fix You\",\r\n    \"year\": 2008,\r\n    \"performer\": \"Coldplay\",\r\n    \"genre\": \"Pop\",\r\n    \"duration\": 120\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:{{port}}/songs",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "{{port}}",
                  "path": ["songs"]
                }
              },
              "response": []
            },
            {
              "name": "Add User John",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"john\",\r\n    \"password\": \"secret\",\r\n    \"fullname\": \"John Doe\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:{{port}}/users",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "{{port}}",
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Add User Jane",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"jane\",\r\n    \"password\": \"secret\",\r\n    \"fullname\": \"John Doe\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:{{port}}/users",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "{{port}}",
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Login with User John",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { data: { accessToken } } = pm.response.json();\r",
                      "pm.environment.set('accessTokenJohn', accessToken);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"john\",\r\n    \"password\": \"secret\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:{{port}}/authentications",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "{{port}}",
                  "path": ["authentications"]
                }
              },
              "response": []
            },
            {
              "name": "Login with User Jane",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { data: { accessToken } } = pm.response.json();\r",
                      "pm.environment.set('accessTokenJane', accessToken);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"jane\",\r\n    \"password\": \"secret\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:{{port}}/authentications",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "{{port}}",
                  "path": ["authentications"]
                }
              },
              "response": []
            },
            {
              "name": "(John) Create Playlist",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseJson = pm.response.json();\r",
                      "pm.environment.set('playlistIdJohn', responseJson.data.playlistId);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessTokenJohn}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Lagu Indie Hits Indonesia\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:{{port}}/playlists",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "{{port}}",
                  "path": ["playlists"]
                }
              },
              "response": []
            },
            {
              "name": "(John) Add Song A to Playlist",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessTokenJohn}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"songId\": \"{{songIdA}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:{{port}}/playlists/{{playlistIdJohn}}/songs",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "{{port}}",
                  "path": ["playlists", "{{playlistIdJohn}}", "songs"]
                }
              },
              "response": []
            },
            {
              "name": "(John) Add Song B to Playlist",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessTokenJohn}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"songId\": \"{{songIdB}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:{{port}}/playlists/{{playlistIdJohn}}/songs",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "{{port}}",
                  "path": ["playlists", "{{playlistIdJohn}}", "songs"]
                }
              },
              "response": []
            },
            {
              "name": "(John) Delete Song A from Playlist",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessTokenJohn}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"songId\": \"{{songIdA}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:{{port}}/playlists/{{playlistIdJohn}}/songs",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "{{port}}",
                  "path": ["playlists", "{{playlistIdJohn}}", "songs"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Activities in Playlist without Authentication",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('it should response 401 status code', () => {\r",
                  "    pm.expect(pm.response).to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('response Content-Type header should have application/json value', () => {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
                  "}); \r",
                  "\r",
                  "pm.test('response body should an object', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:{{port}}/playlists/{{playlistIdJohn}}/activities",
              "protocol": "http",
              "host": ["localhost"],
              "port": "{{port}}",
              "path": ["playlists", "{{playlistIdJohn}}", "activities"]
            }
          },
          "response": []
        },
        {
          "name": "(Jane) Get Activities in Not Found Playlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('it should response 404 status code', () => {\r",
                  "    pm.expect(pm.response).to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test('response Content-Type header should have application/json value', () => {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
                  "}); \r",
                  "\r",
                  "pm.test('response body should an object', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "pm.test('response body have correct property and value', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseJson.status).to.equal('fail');\r",
                  "    pm.expect(responseJson.message).to.be.a('string');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessTokenJane}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:{{port}}/playlists/xxx/activities",
              "protocol": "http",
              "host": ["localhost"],
              "port": "{{port}}",
              "path": ["playlists", "xxx", "activities"]
            }
          },
          "response": []
        },
        {
          "name": "(Jane) Get Activities in John Playlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('it should response 403 status code', () => {\r",
                  "    pm.expect(pm.response).to.have.status(403);\r",
                  "});\r",
                  "\r",
                  "pm.test('response Content-Type header should have application/json value', () => {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
                  "}); \r",
                  "\r",
                  "pm.test('response body should an object', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "pm.test('response body have correct property and value', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseJson.status).to.equal('fail');\r",
                  "    pm.expect(responseJson.message).to.be.a('string');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessTokenJane}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:{{port}}/playlists/{{playlistIdJohn}}/activities",
              "protocol": "http",
              "host": ["localhost"],
              "port": "{{port}}",
              "path": ["playlists", "{{playlistIdJohn}}", "activities"]
            }
          },
          "response": []
        },
        {
          "name": "(John) Get Activities in Playlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('it should response 200 status code', () => {\r",
                  "    pm.expect(pm.response).to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('response Content-Type header should have application/json value', () => {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
                  "}); \r",
                  "\r",
                  "pm.test('response body should an object', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "pm.test('it should response with valid body', () => {\r",
                  "    const expectedPlaylistId = pm.environment.get('playlistIdJohn');\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson.status).to.equal('success');\r",
                  "    pm.expect(responseJson.data).to.be.an('object');\r",
                  "    const { playlistId, activities } = responseJson.data;\r",
                  "    pm.expect(playlistId).to.equal(expectedPlaylistId);\r",
                  "    pm.expect(activities).to.be.an('array');\r",
                  "    pm.expect(activities).to.length(3);\r",
                  "\r",
                  "    const [ activity1, activity2, activity3 ] = activities;\r",
                  "\r",
                  "    pm.expect(activity1.username).to.equal('john');\r",
                  "    pm.expect(activity1.title).to.equal('Life in Technicolor');\r",
                  "    pm.expect(activity1.action).to.equal('add');\r",
                  "    pm.expect(activity1.time).to.be.a('string');\r",
                  "\r",
                  "    pm.expect(activity2.username).to.equal('john');\r",
                  "    pm.expect(activity2.title).to.equal('Fix You');\r",
                  "    pm.expect(activity2.action).to.equal('add');\r",
                  "    pm.expect(activity2.time).to.be.a('string');\r",
                  "\r",
                  "    pm.expect(activity3.username).to.equal('john');\r",
                  "    pm.expect(activity3.title).to.equal('Life in Technicolor');\r",
                  "    pm.expect(activity3.action).to.equal('delete');\r",
                  "    pm.expect(activity3.time).to.be.a('string');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessTokenJohn}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:{{port}}/playlists/{{playlistIdJohn}}/activities",
              "protocol": "http",
              "host": ["localhost"],
              "port": "{{port}}",
              "path": ["playlists", "{{playlistIdJohn}}", "activities"]
            }
          },
          "response": []
        },
        {
          "name": "(John) Delete Playlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('it should response 200 status code', () => {\r",
                  "    pm.expect(pm.response).to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('response Content-Type header should have application/json value', () => {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
                  "}); \r",
                  "\r",
                  "pm.test('response body should an object', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "pm.test('response body have correct property and value', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseJson.status).to.equal('success');\r",
                  "    pm.expect(responseJson.message).to.be.a('string')\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessTokenJohn}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:{{port}}/playlists/{{playlistIdJohn}}",
              "protocol": "http",
              "host": ["localhost"],
              "port": "{{port}}",
              "path": ["playlists", "{{playlistIdJohn}}"]
            }
          },
          "response": []
        },
        {
          "name": "(John) Get Activities in Playlist After Deletion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('it should response 404 status code', () => {\r",
                  "    pm.expect(pm.response).to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test('response Content-Type header should have application/json value', () => {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
                  "}); \r",
                  "\r",
                  "pm.test('response body should an object', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "pm.test('response body have correct property and value', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseJson.status).to.equal('fail');\r",
                  "    pm.expect(responseJson.message).to.be.a('string');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessTokenJohn}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:{{port}}/playlists/{{playlistIdJohn}}/activities",
              "protocol": "http",
              "host": ["localhost"],
              "port": "{{port}}",
              "path": ["playlists", "{{playlistIdJohn}}", "activities"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
